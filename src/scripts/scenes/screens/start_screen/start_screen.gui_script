local App = require('src.app')
local ContextServices = require('src.scripts.scenes.screens.start_screen.service_locator')
local Strategies = require('src.scripts.scenes.screens.start_screen.strategies.strategies')
local StrategiesMediator = require('src.scripts.scenes.screens.start_screen.strategies.mediator')

local RENDER_ORDER = App.config.render_order.start_screen
local MSG = App.constants.msg

local class = App.libs.middleclass
local ScriptWrapper = App.libs.script_wrapper

local Scene = class('Scene', ScriptWrapper)

function Scene:initialize()
    self:register()
end

function Scene:init()
    gui.set_render_order(RENDER_ORDER)
    msg.post('.', MSG.acquire_input_focus)

    ContextServices:init()

    self.event_bus = ContextServices.event_bus

    self.mediator = StrategiesMediator(ContextServices)
end

function Scene:update(dt)
    self.mediator:update(dt)
end

function Scene:on_input(action_id, action)
    if not action_id then
        return
    end

    self.event_bus:emit(action_id, action)
end

function Scene:on_message(message_id, message, sender)
    self.event_bus:emit(message_id, message)
    self.mediator:on_message(message_id, message, sender)
end

function Scene:final()
    self.event_bus:clear()
    self.mediator:final()
end

Scene()
